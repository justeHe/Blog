<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Juste&#39;s Website Building Log (1)</title>
    <url>/blog/en/2025/03/10/blog_log_1/</url>
    <content><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>Three years ago, after learning the front-end trio (HTML, CSS, JavaScript), I always wanted to build a personal blog. However, due to a lack of time, this project was indefinitely postponed. Recently, while browsing GitHub, I came across some interesting front-end themes, which reignited my blog plan. This blog is primarily built using the <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a> template. Below, I will share the tools and resource sites used in building this blog.</p>
<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>The <a href="https://cloud.tencent.com/act/campus?fromSource=gwzcw.7502004.7502004.7502004&utm_medium=cpc&utm_id=gwzcw.7502004.7502004.7502004&bd_vid=11264964216929139476">server</a> is a student discount from Tencent Cloud, which is quite affordable and can be renewed for three years, making it sufficient for building a personal blog. However, domain registration can be a bit troublesome. If you don’t want a server, you can use GitHub’s GitHub Pages as a server, but the downside is that it can only be used for static pages, which is sufficient for a personal blog. For panel management, I used Baota, which is a conventional choice.</p>
<h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><h3 id="Homepage"><a href="#Homepage" class="headerlink" title="Homepage"></a>Homepage</h3><p>The homepage uses a <a href="https://github.com/PavelDoGreat/WebGL-Fluid-Simulation">fluid simulation</a> effect, <a href="https://paveldogreat.github.io/WebGL-Fluid-Simulation/">try it out</a><br><img src="https://juste.com.cn/blog/en/Images/fluid_simulation.png" alt="fluid_simulation.png"></p>
<h3 id="Blog-Interface"><a href="#Blog-Interface" class="headerlink" title="Blog Interface"></a>Blog Interface</h3><p>The main body of the blog is created using <a href="https://butterfly.js.org/">hexo butterfly</a>.</p>
<h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><p>Comments are implemented by deploying <a href="https://github.com/ArtalkJS/Artalk">artalk</a> on the server.</p>
<h2 id="Resource-Sites"><a href="#Resource-Sites" class="headerlink" title="Resource Sites"></a>Resource Sites</h2><p>Anime Pictures: <a href="https://bz.zzzmh.cn/index">https://bz.zzzmh.cn/index</a></p>
<p>Image Compression: <a href="https://saerasoft.com/caesium">https://saerasoft.com/caesium</a></p>
<p>Icons: <a href="https://fontawesome.com/icons?from=io">https://fontawesome.com/icons?from=io</a></p>
<p>Webtemplate: <a href="https://github.com/huangshiyu13/webtemplate">https://github.com/huangshiyu13/webtemplate</a></p>
]]></content>
      <categories>
        <category>Website Building</category>
      </categories>
      <tags>
        <tag>Website Building Log</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Denoising (Generating Noisy Images)</title>
    <url>/blog/en/2025/03/13/image%20denoising/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Recently, while studying computer vision, I encountered various image denoising techniques. In this series, I will mainly introduce traditional image denoising methods. Before diving into the denoising techniques, let’s first introduce some common noise types and evaluation metrics.</p>
<h2 id="Introduction-to-Common-Noises-and-Example-Code"><a href="#Introduction-to-Common-Noises-and-Example-Code" class="headerlink" title="Introduction to Common Noises and Example Code"></a>Introduction to Common Noises and Example Code</h2><p>Before introducing the common noises, let’s start with our original image, which is also a classic image in the field of computer vision:<br><img src="https://juste.com.cn/blog/en/Images/picture_denoising/lena.jpg" alt="lena.jpg"></p>
<h3 id="Gaussian-Noise"><a href="#Gaussian-Noise" class="headerlink" title="Gaussian Noise"></a>Gaussian Noise</h3><p>Gaussian noise is simply random noise that follows a Gaussian distribution, whose probability density function is given by<br>$$ P(x) &#x3D; \frac{1}{\sqrt{2\pi\sigma^2}} e^{-\frac{(x - \mu)^2}{2\sigma^2}} $$<br>where $\mu$ determines the mean of the noise and $\sigma^2$ determines the noise intensity. Note that Gaussian noise is generally assumed to be independently and identically distributed.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_gaussian_noise</span>(<span class="params">image, mean=<span class="number">0</span>, std=<span class="number">25</span></span>):</span><br><span class="line">    row, col, ch = image.shape</span><br><span class="line">    gauss = np.random.normal(mean, std, (row, col, ch))</span><br><span class="line">    gauss = gauss.reshape(row, col, ch)</span><br><span class="line">    noisy_image = image + gauss</span><br><span class="line">    noisy_image = np.clip(noisy_image, <span class="number">0</span>, <span class="number">255</span>)  <span class="comment"># Ensure pixel values are in the range 0-255</span></span><br><span class="line">    noisy_image = noisy_image.astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> noisy_image</span><br></pre></td></tr></table></figure>

<p>Example:<br><img src="https://juste.com.cn/blog/en/Images/picture_denoising/gaussian_image_sigma_20.jpg" alt="lena_gaussian.jpg"></p>
<h3 id="Salt-and-Pepper-Noise"><a href="#Salt-and-Pepper-Noise" class="headerlink" title="Salt and Pepper Noise"></a>Salt and Pepper Noise</h3><p>Salt and pepper noise refers to noise where some pixels are randomly set to the maximum value (salt) or the minimum value (pepper), often used to simulate noise due to transmission errors or sensor dirt. Salt and pepper noise does not have an explicit probability density function; instead, the probability $p$ is used to control the occurrence of noisy pixels.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_salt_pepper_noise</span>(<span class="params">image, prob=<span class="number">0.05</span></span>):</span><br><span class="line">    noisy_image = np.copy(image)</span><br><span class="line">    h, w, c = noisy_image.shape</span><br><span class="line">    pepper = np.random.rand(h, w) &lt; prob</span><br><span class="line">    noisy_image[pepper] = <span class="number">0</span></span><br><span class="line">    salt = np.random.rand(h, w) &lt; prob</span><br><span class="line">    noisy_image[salt] = <span class="number">255</span></span><br><span class="line">    noisy_image = np.clip(noisy_image, <span class="number">0</span>, <span class="number">255</span>)  <span class="comment"># 确保像素值在 0-255 范围内</span></span><br><span class="line">    noisy_image = noisy_image.astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> noisy_image</span><br></pre></td></tr></table></figure>
<p>Example:<br><img src="https://juste.com.cn/blog/en/Images/picture_denoising/salt_pepper_image.jpg" alt="lena_gaussian.jpg"></p>
<h3 id="Poisson-Noise"><a href="#Poisson-Noise" class="headerlink" title="Poisson Noise"></a>Poisson Noise</h3><p>Poisson noise, also known as “shot noise” or “granular noise”, is generated by the random arrival of photons in a photodetector, and its characteristics are related to the signal intensity. Poisson noise is signal-dependent and is commonly observed in low-light imaging. Its distribution follows the Poisson distribution: $P(k) &#x3D; \frac{\lambda^{k} e^{-\lambda}}{k!}$<br>where $\lambda$ is the original pixel value and $k$ is the noisy pixel value.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_poisson_noise</span>(<span class="params">image</span>):</span><br><span class="line">    vals = <span class="built_in">len</span>(np.unique(image))</span><br><span class="line">    vals = <span class="number">2</span> ** np.ceil(np.log2(vals))</span><br><span class="line">    noisy_image = np.random.poisson(image * vals) / <span class="built_in">float</span>(vals)</span><br><span class="line">    noisy_image = np.clip(noisy_image, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    noisy_image = noisy_image.astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> noisy_image</span><br></pre></td></tr></table></figure>
<p>Example:<br><img src="https://juste.com.cn/blog/en/Images/picture_denoising/poisson_image.jpg" alt="lena_gaussian.jpg"> </p>
<h3 id="Multiplicative-Noise"><a href="#Multiplicative-Noise" class="headerlink" title="Multiplicative Noise"></a>Multiplicative Noise</h3><p>Multiplicative noise is noise that is proportional to the signal intensity. A common model is:<br>$$ g(x, y) &#x3D; f(x, y) · \eta(x,y) \qquad \eta \sim U[a,b]$$<br> Of course, $\eta$ can also follow a Gaussian distribution with mean 0, which is the typical speckle noise.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_multiplicative_noise</span>(<span class="params">image, mean=<span class="number">0</span>, std=<span class="number">0.1</span></span>):</span><br><span class="line">    row, col, ch = image.shape</span><br><span class="line">    gauss = np.random.normal(mean, std, (row, col, ch))</span><br><span class="line">    gauss = gauss.reshape(row, col, ch)</span><br><span class="line">    noisy_image = image * gauss</span><br><span class="line">    noisy_image = np.clip(noisy_image, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    noisy_image = noisy_image.astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> noisy_image</span><br></pre></td></tr></table></figure>
<p>Example:<br><img src="https://juste.com.cn/blog/en/Images/picture_denoising/multiplicative_image.jpg" alt="lena_gaussian.jpg"> </p>
<h3 id="Uniform-Noise"><a href="#Uniform-Noise" class="headerlink" title="Uniform Noise"></a>Uniform Noise</h3><p>Uniform noise is an additive noise that follows a uniform distribution:<br>$$ g(x, y) &#x3D; f(x, y) + \eta(x,y) \qquad \eta \sim U[a,b]$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_uniform_noise</span>(<span class="params">image, low=-<span class="number">50</span>, high=<span class="number">50</span></span>):</span><br><span class="line">    row, col, ch = image.shape</span><br><span class="line">    uniform_noise = np.random.uniform(low, high, (row, col, ch))</span><br><span class="line">    noisy_image = image + uniform_noise</span><br><span class="line">    noisy_image = np.clip(noisy_image, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    noisy_image = noisy_image.astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> noisy_image</span><br></pre></td></tr></table></figure>
<p>Example:<br><img src="https://juste.com.cn/blog/en/Images/picture_denoising/uniform_image.jpg" alt="lena_gaussian.jpg"> </p>
<h3 id="周期噪声"><a href="#周期噪声" class="headerlink" title="周期噪声"></a>周期噪声</h3><p>Periodic noise is caused by electronic interference and manifests as a regular sinusoidal noise pattern:<br>$$ n(x, y) &#x3D; A · \sin(2\pi (ux + vy) + \phi) $$<br>where $A$ is the amplitude, $u$ and $v$ are the frequencies, and $\phi$ is the phase.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_periodic_noise</span>(<span class="params">image, frequency=<span class="number">50</span>, amplitude=<span class="number">50</span></span>):</span><br><span class="line">    row, col, ch = image.shape</span><br><span class="line">    x = np.arange(<span class="number">0</span>, col)</span><br><span class="line">    y = np.arange(<span class="number">0</span>, row)</span><br><span class="line">    X, Y = np.meshgrid(x, y)</span><br><span class="line">    <span class="comment"># 生成单通道噪声</span></span><br><span class="line">    noise = amplitude * np.sin(<span class="number">2</span> * np.pi * frequency * X / col)</span><br><span class="line">    <span class="comment"># 将噪声扩展到三通道</span></span><br><span class="line">    noise = np.stack([noise, noise, noise], axis=-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 添加噪声到图像</span></span><br><span class="line">    noisy_image = image + noise</span><br><span class="line">    noisy_image = np.clip(noisy_image, <span class="number">0</span>, <span class="number">255</span>)  <span class="comment"># 确保像素值在 0-255 范围内</span></span><br><span class="line">    noisy_image = noisy_image.astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> noisy_image</span><br></pre></td></tr></table></figure>
<p>Example:<br><img src="https://juste.com.cn/blog/en/Images/picture_denoising/periodic_image.jpg" alt="lena_gaussian.jpg"></p>
<h3 id="Mixed-Noise"><a href="#Mixed-Noise" class="headerlink" title="Mixed Noise"></a>Mixed Noise</h3><p>Mixed noise is simply a combination of several common noise types.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_mixed_noise</span>(<span class="params">image</span>):</span><br><span class="line">    noisy_image = add_gaussian_noise(image, std=<span class="number">20</span>)</span><br><span class="line">    noisy_image = add_salt_pepper_noise(noisy_image)</span><br><span class="line">    <span class="keyword">return</span> noisy_image</span><br></pre></td></tr></table></figure>
<p>Example:<br><img src="https://juste.com.cn/blog/en/Images/picture_denoising/mixed_image.jpg" alt="lena_gaussian.jpg"> </p>
<h2 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h2><h3 id="PSNR-Peak-Signal-to-Noise-Ratio"><a href="#PSNR-Peak-Signal-to-Noise-Ratio" class="headerlink" title="PSNR (Peak Signal-to-Noise Ratio)"></a><strong>PSNR (Peak Signal-to-Noise Ratio)</strong></h3><ul>
<li><strong>Formula</strong>：<br>$$ \text{PSNR} &#x3D; 20 \log_{10}\left(\frac{255}{\sqrt{\text{MSE}}}\right) $$</li>
<li><strong>Meaning</strong>：Quantifies pixel-level differences; a higher value (typically &gt;30dB) indicates better denoising performance.</li>
<li><strong>Characteristics</strong>：Simple calculation, but not sensitive to human visual perception.</li>
</ul>
<h3 id="SSIM（结构相似性指数）"><a href="#SSIM（结构相似性指数）" class="headerlink" title="SSIM（结构相似性指数）"></a><strong>SSIM（结构相似性指数）</strong></h3><ul>
<li><p><strong>Formula</strong>：<br>The product of three components: luminance ($\mu$), contrast ($\sigma$), and structure ($\sigma_{xy}$):<br>$$<br>\text{SSIM} &#x3D; \frac{(2\mu_x\mu_y + C_1)(2\sigma_{xy} + C_2)}{(\mu_x^2 + \mu_y^2 + C_1)(\sigma_x^2 + \sigma_y^2 + C_2)}<br>$$</p>
<ul>
<li>$\mu_x, \mu_y$: Mean of the images (luminance)</li>
<li>$\sigma_x, \sigma_y$: Standard deviation (contrast)</li>
<li>$\sigma_{xy}$: Covariance (structural similarity)</li>
<li>$C_1&#x3D;(k_1L)^2, C_2&#x3D;(k_2L)^2$: Constants (with $L$ as the pixel range, typically $k_1&#x3D;0.01, k_2&#x3D;0.03$)</li>
</ul>
</li>
<li><p><strong>Meaning</strong>：Ranges from [0,1]; closer to 1 indicates better structural preservation.</p>
</li>
<li><p><strong>Characteristics</strong>：Provides a comprehensive evaluation of texture, edge, and contrast preservation.</p>
</li>
</ul>
<h3 id="MSE（Mean-Squared-Error）"><a href="#MSE（Mean-Squared-Error）" class="headerlink" title="MSE（Mean Squared Error）"></a><strong>MSE（Mean Squared Error）</strong></h3><ul>
<li><strong>Formula</strong>：<br>$$ \text{MSE} &#x3D; \frac{1}{N}\sum (x_i - y_i)^2 $$</li>
<li><strong>Meaning</strong>：Directly reflects the average pixel difference; lower values are better.</li>
<li><strong>Characteristics</strong>：Ignores spatial structure and is sensitive to outliers.</li>
</ul>
<h3 id="EPI（Edge-Preservation-Index）"><a href="#EPI（Edge-Preservation-Index）" class="headerlink" title="EPI（Edge Preservation Index）"></a><strong>EPI（Edge Preservation Index）</strong></h3><ul>
<li><strong>Formula</strong>：<br>$$ \text{EPI} &#x3D; \frac{\sum|\nabla\text{denoised} - \nabla\text{original}|}{\sum|\nabla\text{original}|} $$</li>
<li><strong>Meaning</strong>：Evaluates the ability to preserve edges; lower values (ideally 0) indicate less detail loss.</li>
<li><strong>Characteristics</strong>：Specifically used for detecting edge blurring, but sensitive to the type of noise.</li>
</ul>
<h3 id="LPIPS（Learned-Perceptual-Image-Patch-Similarity）"><a href="#LPIPS（Learned-Perceptual-Image-Patch-Similarity）" class="headerlink" title="LPIPS（Learned Perceptual Image Patch Similarity）"></a><strong>LPIPS（Learned Perceptual Image Patch Similarity）</strong></h3><ul>
<li><strong>Principle</strong>：Based on the feature distance of a pre-trained VGG network.<br>$$ \text{LPIPS} &#x3D; |\phi(x) - \phi(y)|_2 $$</li>
<li><strong>Meaning</strong>：Lower values indicate closer visual similarity, reflecting high-level semantic similarity.</li>
<li><strong>Characteristics</strong>：Computationally complex, requires GPU, and depends on deep learning models.</li>
</ul>
<h3 id="指标对比"><a href="#指标对比" class="headerlink" title="指标对比"></a>指标对比</h3><table>
<thead>
<tr>
<th>Metric Type</th>
<th>Representative Metric</th>
<th>Core Meaning</th>
<th>Computational Complexity</th>
</tr>
</thead>
<tbody><tr>
<td>Pixel Difference</td>
<td>PSNR&#x2F;MSE</td>
<td>Global pixel error</td>
<td>Low</td>
</tr>
<tr>
<td>Structural Similarity</td>
<td>SSIM</td>
<td>Texture&#x2F;edge preservation</td>
<td>Medium</td>
</tr>
<tr>
<td>Edge Preservation</td>
<td>EPI</td>
<td>Degree of detail loss</td>
<td>Medium</td>
</tr>
<tr>
<td>Perceptual Quality</td>
<td>LPIPS</td>
<td>Visual similarity (human perception)</td>
<td>High</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> lpips</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> skimage.metrics <span class="keyword">import</span> structural_similarity <span class="keyword">as</span> ssim</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PSNR</span>(<span class="params">original, compressed</span>):</span><br><span class="line">    mse = np.mean((original - compressed) ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> mse == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">    max_pixel = <span class="number">255.0</span></span><br><span class="line">    psnr = <span class="number">20</span> * np.log10(max_pixel / np.sqrt(mse))</span><br><span class="line">    <span class="keyword">return</span> psnr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SSIM</span>(<span class="params">original, denoised</span>):</span><br><span class="line">    <span class="comment"># 使用 `channel_axis` 参数替代已弃用的 `multichannel`</span></span><br><span class="line">    <span class="keyword">return</span> ssim(original, denoised, channel_axis=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MSE</span>(<span class="params">original, compressed</span>):</span><br><span class="line">    mse = np.mean((original - compressed) ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> mse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EPI</span>(<span class="params">original, denoised</span>):</span><br><span class="line">    <span class="comment"># 将图像转换为灰度图</span></span><br><span class="line">    gray_original = cv2.cvtColor(original, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    gray_denoised = cv2.cvtColor(denoised, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算 Sobel 梯度</span></span><br><span class="line">    sobel_original = cv2.Sobel(gray_original, cv2.CV_64F, <span class="number">1</span>, <span class="number">1</span>, ksize=<span class="number">3</span>)</span><br><span class="line">    sobel_denoised = cv2.Sobel(gray_denoised, cv2.CV_64F, <span class="number">1</span>, <span class="number">1</span>, ksize=<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算 EPI</span></span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(np.<span class="built_in">abs</span>(sobel_denoised - sobel_original)) / np.<span class="built_in">sum</span>(np.<span class="built_in">abs</span>(sobel_original))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 LPIPS 模型</span></span><br><span class="line">loss_fn = lpips.LPIPS(net=<span class="string">&#x27;vgg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LPIPS</span>(<span class="params">original, denoised</span>):</span><br><span class="line">    <span class="comment"># 将图像转换为 PyTorch 张量并归一化</span></span><br><span class="line">    original_torch = torch.from_numpy(original).permute(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>).unsqueeze(<span class="number">0</span>).<span class="built_in">float</span>() / <span class="number">255.0</span></span><br><span class="line">    denoised_torch = torch.from_numpy(denoised).permute(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>).unsqueeze(<span class="number">0</span>).<span class="built_in">float</span>() / <span class="number">255.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算 LPIPS</span></span><br><span class="line">    <span class="keyword">return</span> loss_fn(original_torch, denoised_torch).item()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">original, compressed</span>):</span><br><span class="line">    psnr = PSNR(original, compressed)</span><br><span class="line">    ssim_val = SSIM(original, compressed)  <span class="comment"># 避免与函数名冲突</span></span><br><span class="line">    mse = MSE(original, compressed)</span><br><span class="line">    epi = EPI(original, compressed)</span><br><span class="line">    lpips_val = LPIPS(original, compressed)  <span class="comment"># 避免与函数名冲突</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;PSNR: <span class="subst">&#123;psnr&#125;</span>, SSIM: <span class="subst">&#123;ssim_val&#125;</span>, MSE: <span class="subst">&#123;mse&#125;</span>, EPI: <span class="subst">&#123;epi&#125;</span>, LPIPS: <span class="subst">&#123;lpips_val&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> psnr, ssim_val, mse, epi, lpips_val</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Image Denoising</category>
      </categories>
      <tags>
        <tag>Image Processing, Practice, Theory, Python, Filters</tag>
      </tags>
  </entry>
</search>
